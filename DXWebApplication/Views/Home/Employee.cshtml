@{
    ViewBag.Title = "Employee";
}
<script>

    function OnBeginCallback(s, e) {
        if (e.command === "STARTEDIT") {
            var key = s.GetRowKey(s.GetFocusedRowIndex());
            e.customArgs['ACC_EMP_ID'] = key;
        }
        e.customArgs['Command'] = e.command;
    }

    var rowIndex = 0;
    function SalaryAmountGridView_OnBatchEditStartEditing(s, e) {
        rowIndex = e.visibleIndex;
        var salaryamount = SalaryAmountGridView.batchEditApi.GetCellValue(rowIndex, "HRS_SAL_SalaryAmount", false);
        var startDate = SalaryAmountGridView.batchEditApi.GetCellValue(rowIndex, "HRS_SAL_StartDate", false);
        if (e.focusedColumn.fieldName == "HRS_SAL_StartDate") {
            if (salaryamount == null)
                e.cancel = true;
        }
        if (e.focusedColumn.fieldName == "HRS_SAL_EndDate") {
            if (salaryamount == null || startDate == null)
                e.cancel = true;
        }
    }

    function SalaryAmountGridView_OnBatchEditRowInserting(s, e) {
        var arr = SalaryAmountGridView.batchEditApi.GetInsertedRowIndices();
        if (arr.length != 0)
            e.cancel = true;
    }

    function HRS_SAL_SalaryAmount_OnValueChange(s, e) {
        var salaryamount = s.GetValue();
        var startDate = s.GetValue();
        if (startDate == null || startDate == "") {
            SalaryAmountGridView.batchEditApi.SetCellValue(rowIndex, "HRS_SAL_StartDate", salaryamount);
        }
    }

    function OnEndCallback (s,e) {
            if (s.cpViewError != null && s.cpViewError.length > 0) {
                var errorMessage = "Validation errors:\n";
                s.cpViewError.forEach(function (error) {
                    errorMessage += error + "\n";
                });
                alert(errorMessage);
            }
    }

    function OnToolbarItemClick(s, e) {

         if (e.item.name == "employeeReport")
             window.location.href = "@Url.Action("ViewEmpReport", "Home"/*, new { id = "id" }*/)";

         if (e.item.name == "salaryReport")
            window.location.href = "@Url.Action("ViewSalReport", "Home"/*, new { id = "id" }*/)";

         if (e.item.name === "showPopupButton") {
             var key = employeeGridView.GetRowKey(employeeGridView.GetFocusedRowIndex());
             $.ajax({
                 type: "Get",
                  url: '@Url.Action("PartialEmpcontractEditForm", "Home")',
                 data: { empid: key },
                 success: function (jsReturnArgs) {
                     $("#results").html(jsReturnArgs);
                     popupControl.Show();

                 },
                 error: function (errorData) { onError(errorData); }
             });

         }
    }



    function onTabClick(s, e) {
        if (e.tab.name === "salary") {
            $("#salaryContent").show();
            $("#batchGridViewContainer").show();
        }
    }
</script>

<script>

    var contarctRowIndex = 0;
    function ContractBatch_OnBatchEditStartEditing(s, e) {
        contarctRowIndex = e.visibleIndex;
        var empid = employeeGridView.GetRowKey(employeeGridView.GetFocusedRowIndex());
        s.batchEditApi.SetCellValue(contarctRowIndex, "HRS_EMC_EmpID", empid);

        if (e.focusedColumn.fieldName == "HRS_EMC_Number") {
            var num = ContractBatch.batchEditApi.GetCellValue(contarctRowIndex, "HRS_EMC_Number", false);
            if (num == null || num <= 0) {
                var arr = ContractBatch.batchEditApi.GetRowVisibleIndices();
                var max = ContractBatch.batchEditApi.GetCellValue(arr[0], "HRS_EMC_Number", false);
                for (var i = 1; i < arr.length; i++) {
                    var number = ContractBatch.batchEditApi.GetCellValue(arr[i], "HRS_EMC_Number", false);
                    if (number > max) {
                        max = number;
                    }
                }
                ContractBatch.batchEditApi.SetCellValue(contarctRowIndex, "HRS_EMC_Number", max + 1);
            }
            e.cancel = true;
        }
    }

</script>

<main>
    <form class="row" aria-labelledby="aspnetTitle">
        <h1 id="title">Employee</h1>
        @Html.Action("PartialEmpGridView")
    </form>
</main>

@Html.DevExpress().PopupControl(settings =>
{
    settings.Name = "popupControl";
    settings.PopupElementID = "button";
    settings.PopupAction = PopupAction.MouseOver;
    settings.ShowOnPageLoad = false;
    settings.Width = 950;
    settings.Modal = true;
    settings.CloseAction = CloseAction.CloseButton;
    settings.HeaderText = "Employee Contract";
    settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
    settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write("<div id = 'results'>Window content</div>");
        @Html.DevExpress().FormLayout(s =>
        {
            s.Name = "ModalModeFormLayout";
            s.RequiredMarkDisplayMode = RequiredMarkMode.None;
            s.Width = Unit.Percentage(100);
            s.Height = Unit.Percentage(100);
            s.NestedExtensionWidth = Unit.Percentage(100);
            s.Items.Add(i =>
            {
                i.ShowCaption = DefaultBoolean.False;
                i.SetNestedContent(() =>
                {
                    ViewContext.Writer.Write("<div style='float:right'> ");
                    Html.DevExpress().Button(btnSettings =>
                    {
                        btnSettings.Name = "btnUpdate";
                        btnSettings.Text = "Save";
                        btnSettings.ClientSideEvents.Click = "function(s,e){ContractBatch.UpdateEdit();}";
                    }).Render();
                    Html.DevExpress().Button(btnSettings =>
                    {
                        btnSettings.Name = "btnCancel";
                        btnSettings.Text = "Cancel";
                        btnSettings.Style[HtmlTextWriterStyle.MarginLeft] = "5px";
                        btnSettings.ClientSideEvents.Click = "function(s, e){ popupControl.Hide(); }";
                    }).Render();
                    ViewContext.Writer.Write("</div>");
                });
            });
        }).Render();


    });


}).GetHtml()
